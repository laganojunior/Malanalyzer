#!/usr/bin/env python
usageStmt = """
Minimizes a model to fit the database and outputs recommendations for a 
particular user

Usage: RecommendAnime [--print-stats] [--db filename]
       username number model

username  : the username to print recommendations for       
number    : the number of anime to recommend per run
model     : the filename to load the model from
       
If --print-stats is defined, then extra statistics for recommended anime is 
provided.

If --db is provided, then the filename provided is used as the database. Otherwise,
Mal.db is used as the database.
"""

from MalDB import MemReader
from LinearFactorModel import loadFactorModel
import numpy
import sys
import getopt

# Process arguments
try:
    argList, restOfArgs = getopt.getopt(sys.argv[1:],"v",
                          ["print-stats"])
                          
except getopt.GetoptError, e:
    print e
    print usageStmt
    exit(1)

printStats = False
dbFilename = "Mal.db"

for (arg, value) in argList:
    if arg =="--print-stats":
        printStats = True
    elif arg == "--db":
        dbFilename = value

if len(restOfArgs) != 3:
    print "3 non-optional arguments needed"
    print usageStmt
    exit(1)
    
username = restOfArgs[0]    
number = int(restOfArgs[1])
modelfilename = restOfArgs[2]

# Open up the database and obtain the username id and the anime he/she rated
db = MemReader(dbFilename)
userId = db.getUserId(username) 
ratingsMap = db.getAnimeRatingsForUser(userId)
  
# Load up the model from file
model = loadFactorModel(open(modelfilename, "r"))

# Get the predicted ratings for this user for all anime that the user does not have on her list
animeIds = model.getVIds()
goodness = [(animeId, model.predict(userId, animeId)) for animeId in animeIds if animeId not in ratingsMap]

# Sort by the predicted value
goodness.sort(key = lambda vTuple: vTuple[1], reverse = True)

if printStats:
    print "Title | Predicted Rating | # of raters | average rating | rating std. dev."

i = 0
for animeId, value in goodness:
    # Prevent recommending anime no one has rated, as the factors for these are arbitrary
    userRatingsMap = db.getUserRatingsForAnime(animeId)
    if len(userRatingsMap) == 0:
        continue
        
    # Accumulate statistics if need
    if printStats:
        userRatings = [float(userRatingsMap[user]) for user in userRatingsMap.keys()]
        averageRating = numpy.average(userRatings)
        deviation = numpy.std(userRatings)
        numberOfRaters = len(userRatings)
        
    name = db.getAnimeName(animeId)
    
    # Print to stdout and file
    if printStats:
        print name , "|", value, "|", numberOfRaters, "|", averageRating, "|", deviation
    else:
        print name
    
    i+=1
    if i >= number:
        break

print        
